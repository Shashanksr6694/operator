apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: tekton-webhooks-extension
  name: tekton-webhooks-extension
  namespace: tekton-pipelines
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: tekton-webhooks-extension-minimal
  namespace: tekton-pipelines
rules:
- apiGroups:
  - ""
  resources:
  - serviceaccounts
  verbs:
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - pods
  - services
  verbs:
  - get
  - list
  - create
  - update
  - delete
  - patch
  - watch
- apiGroups:
  - ""
  resources:
  - pods/log
  - namespaces
  - events
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - secrets
  - configmaps
  verbs:
  - get
  - list
  - create
  - delete
  - update
  - watch
- apiGroups:
  - extensions
  - apps
  resources:
  - deployments
  verbs:
  - get
  - list
  - create
  - update
  - delete
  - patch
  - watch
- apiGroups:
  - tekton.dev
  resources:
  - tasks
  - clustertasks
  - taskruns
  - pipelines
  - pipelineruns
  - pipelineresources
  verbs:
  - get
  - list
  - create
  - update
  - delete
  - patch
  - watch
- apiGroups:
  - tekton.dev
  resources:
  - taskruns/finalizers
  - pipelineruns/finalizers
  verbs:
  - get
  - list
  - create
  - update
  - delete
  - patch
  - watch
- apiGroups:
  - tekton.dev
  resources:
  - tasks/status
  - clustertasks/status
  - taskruns/status
  - pipelines/status
  - pipelineruns/status
  verbs:
  - get
  - list
  - create
  - update
  - delete
  - patch
  - watch
- apiGroups:
  - sources.eventing.knative.dev
  resources:
  - githubsources
  verbs:
  - get
  - list
  - create
  - update
  - delete
  - patch
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: tekton-webhooks-extension-minimal
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: tekton-webhooks-extension-minimal
subjects:
- kind: ServiceAccount
  name: tekton-webhooks-extension
  namespace: tekton-pipelines
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: webhooks-extension
  name: webhooks-extension
spec:
  replicas: 1
  selector:
    matchLabels:
      app: webhooks-extension
  template:
    metadata:
      labels:
        app: webhooks-extension
    spec:
      containers:
      - env:
        - name: PORT
          value: "8080"
        - name: INSTALLED_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: DOCKER_REGISTRY_LOCATION
          value: DOCKER_REPO
        - name: WEB_RESOURCES_DIR
          value: web
        image: gcr.io/tekton-releases/github.com/tektoncd/experimental/webhooks-extension/cmd/extension@sha256:3def6bc1cc448b4ed073d34dc50263e0b4a0240b7836e3e6719feb92e17baae7
        imagePullPolicy: Always
        livenessProbe:
          httpGet:
            path: /liveness
            port: 8080
        name: webhooks-extension
        ports:
        - containerPort: 8080
        readinessProbe:
          httpGet:
            path: /readiness
            port: 8080
      serviceAccountName: tekton-webhooks-extension

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    tekton-dashboard-bundle-location: web/extension.f9d4eab7.js
    tekton-dashboard-display-name: Webhooks
    tekton-dashboard-endpoints: webhooks.web
  labels:
    app: webhooks-extension
    tekton-dashboard-extension: "true"
  name: webhooks-extension
spec:
  ports:
  - port: 8080
    targetPort: 8080
  selector:
    app: webhooks-extension
  type: NodePort

---
apiVersion: serving.knative.dev/v1alpha1
kind: Service
metadata:
  labels:
    app: webhooks-extension-sink
  name: webhooks-extension-sink
spec:
  template:
    spec:
      containers:
      - env:
        - name: INSTALLED_NAMESPACE
          value: tekton-pipelines
        - name: SERVICEACCOUNT
          value: tekton-webhooks-extension
        image: gcr.io/tekton-releases/github.com/tektoncd/experimental/webhooks-extension/cmd/sink@sha256:458100523a96fb837122467aecc858d4ef3d0db8cef2d511b688495c8f9f0d74
        imagePullPolicy: Always
        livenessProbe:
          httpGet:
            path: /liveness
        ports:
        - containerPort: 8080
        readinessProbe:
          httpGet:
            path: /readiness
      serviceAccountName: tekton-webhooks-extension

---
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: monitor-result-task
spec:
  inputs:
    params:
    - default: default pipelinerun
      description: The name of the pipelinerun to be monitored
      name: pipelinerun
    - default: default namespace
      description: The namespace of the pipelinerun to be monitored
      name: pipelinerunnamespace
    - default: Pipeline Succeeded
      description: The text of the success comment
      name: commentsuccess
    - default: Pipeline Failed
      description: The text of the failure comment
      name: commentfailure
    resources:
    - name: pull-request
      type: pullRequest
  outputs:
    resources:
    - name: pull-request
      type: pullRequest
  steps:
  - args:
    - -ce
    - "set -e\ncat <<EOF | python\nimport time, os, json\nfrom kubernetes import client,
      config\nconfig.load_incluster_config()\napi_instance = client.CustomObjectsApi(client.ApiClient(client.Configuration()))\ncomment
      = \"$COMMENT_FAILURE\"\ni = range(100)\nfor x in i:\n    time.sleep( 10 )\n
      \   output = api_instance.get_namespaced_custom_object(\"tekton.dev\", \"v1alpha1\",
      \"$NAMESPACE\", \"pipelineruns\", \"$PIPELINERUN\")\n    if output[\"status\"][\"conditions\"][0][\"status\"]
      == u'True' and output[\"status\"][\"conditions\"][0][\"type\"] == u'Succeeded':\n
      \       comment = \"$COMMENT_SUCCESS\"\n        break\n    if output[\"status\"][\"conditions\"][0][\"status\"]
      == u'False' and output[\"status\"][\"conditions\"][0][\"type\"] == u'Succeeded':\n
      \       for y in output[\"status\"][\"taskRuns\"]:\n            if output[\"status\"][\"taskRuns\"][y][\"status\"][\"conditions\"][0][\"status\"]
      == u'False' and \\\n            output[\"status\"][\"taskRuns\"][y][\"status\"][\"conditions\"][0][\"type\"]
      == u'Succeeded': \n                comment = comment + \": \" + output[\"status\"][\"taskRuns\"][y][\"status\"][\"conditions\"][0][\"message\"]\n
      \       break\nwith open(\"/workspace/pull-request/pr.json\", 'r') as pr_file:\n
      \   data = json.load(pr_file)\n    data['Comments'].append(dict(text=comment))\nos.rename(\"/workspace/pull-request/pr.json\",
      \"/workspace/pull-request/pr.json.backup\")\nwith open(\"/workspace/pull-request/pr.json\",
      'w') as pr_file:\n    json.dump(data, pr_file)\nEOF\n"
    command:
    - /bin/bash
    env:
    - name: PIPELINERUN
      value: ${inputs.params.pipelinerun}
    - name: COMMENT_SUCCESS
      value: ${inputs.params.commentsuccess}
    - name: COMMENT_FAILURE
      value: ${inputs.params.commentfailure}
    - name: NAMESPACE
      value: ${inputs.params.pipelinerunnamespace}
    image: maiwj/kubernetes-python-client@sha256:74a868a0dff5c8ada64472db3efd09d205d4f877d14d2d3226511adbb25cfea3
    name: check

